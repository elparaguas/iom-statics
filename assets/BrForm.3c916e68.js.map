{"version":3,"file":"BrForm.3c916e68.js","sources":["../../src/@bricks/components/BrNotification.vue","../../src/@bricks/components/BrForm.vue"],"sourcesContent":["<template>\n<br-transition name=\"horizontalBlurRight\">\n    <section v-if=\"show\" ref=\"notify\" class=\"br-notify group\" :class=\"`br-notify__${level}`\" @mouseover=\"hovered=true\" @mouseleave=\"hovered=false\">\n        <article>\n            <div v-if=\"autoClose\" ref=\"progress\" class=\"br-notify--progress\"></div>\n            <slot name=\"preicon\">\n                <section v-if=\"level\" class=\"br-notify-preicon\">\n                    <i-gg-info v-if=\"level == 'info'\" />\n                    <i-gg-close-o v-if=\"level == 'danger'\" />\n                    <i-gg-danger v-if=\"level == 'warning'\" />\n                    <i-gg-check-o v-if=\"level == 'success'\" />\n                </section>\n            </slot>\n            <div class=\"br-notify--content\">\n                <span>\n                    <slot></slot>\n                </span>\n                <span v-if=\"$slots.desc\">\n                     <slot name=\"desc\"></slot>\n                </span>\n                <span v-if=\"$slots['inline-actions']\">\n                     <slot name=\"inline-actions\"></slot>\n                </span>\n            </div>\n            <slot name=\"aftericon\">\n                <section v-if=\"closable && !$slots.actions\" >\n                    <i-eva-close-fill v-if=\"closable\" class=\"br-notify--close\" @click=\"emits('update:show', false)\" />\n                </section>\n            </slot>\n            <slot name=\"actions\"></slot>\n        </article>\n    </section>\n</br-transition>\n</template>\n\n<script setup>\nimport { toRefs, watch, useSlots, nextTick, ref, watchEffect, onMounted } from \"vue\"\nimport {gsap} from 'gsap'\n\nconst hovered = ref(false)\nconst notify = ref(null)\nconst progress = ref(null)\nlet timeline = gsap.timeline()\nconst emits = defineEmits(['update:show'])\nconst slots = useSlots()\nconst props = defineProps({\n    autoClose: {\n        default: false,\n        type: Boolean\n    },\n    closable: {\n        default: true,\n        type: Boolean,\n    },\n    level: {\n        default: '',  // or info, danger, warning, success\n        type: String\n    },\n    onComplete: {\n        default: () => {},\n        type: Function\n    },\n    show: {\n        default: false,\n        type: Boolean\n    }\n})\n\nconst {show, autoClose, onComplete} = toRefs(props)\n\nfunction retrieveNotificationLen (slot) {\n    if (!slot.el && slot.children) return slot.children.length * 60 / 1000\n    if (!slot.el && slot.dynamicProps[0]) return slot.props.innerHTML.length * 60 / 1000\n    const el = slot.el\n    const chars = el.textContent\n    const caps = chars.match(/[A-Z]/g)\n    const charCount = chars.length + (caps ? caps.length - 1 : 0)\n    return charCount * 60 / 1000\n}\n\nwatch(show, async flag => {\n    if (timeline && timeline.isActive()) return\n    \n    await nextTick()\n    const defSlot = slots.default()[0]\n    const descSlot = slots.desc && slots.desc()[0]\n\n    if (defSlot && flag && autoClose.value) {\n        // the main slot first\n        const main = retrieveNotificationLen(defSlot)\n        const desc = descSlot && retrieveNotificationLen(descSlot) || 0\n        timeline.to(progress.value, {\n            width: notify.value.offsetWidth,\n            delay: 1,\n            duration:  main + desc,\n            ease: 'linear',\n            onComplete: () => {\n                emits('update:show', false)\n                timeline = gsap.timeline()\n                if (onComplete.value) onComplete.value()\n            }\n        })\n    }\n}, {immediate: true})\n\nwatchEffect(async () => {\n    if (hovered.value) {\n        timeline.pause()\n    }\n    else if (!hovered.value && timeline && timeline.paused()) {\n        setTimeout(() => {\n            timeline.resume()\n        }, 200)\n    }\n})\n</script>\n\n<style lang=\"css\">\n.br-notify {\n    @apply fixed top-0 right-0 m-8 z-1000 min-w-xs max-w-md select-none block ;\n}\n.br-notify--progress {\n    @apply absolute transition duration-400 transform group-hover:(opacity-70 -translate-y-0.2) top-0 left-0 h-0.75 bg-$icon opacity-80;\n}\n\n.br-notify__info {\n    --icon: var(--br-info-text);\n}\n.br-notify__success {\n    --icon: var(--br-success-text);\n}\n.br-notify__warning {\n    --icon: var(--br-warning-text);\n}\n.br-notify__danger {\n    --icon: var(--br-danger-text);\n}\n\n.br-notify > article {\n    @apply flex relative overflow-hidden w-full bg-white shadow-lg py-3.5 px-3 rounded-lg border border-$br-border-color;\n}\n\n.br-notify-preicon {\n    @apply text-$icon self-start mx-1;\n}\n\n.br-notify-preicon > svg{\n    @apply h-5 w-5;\n}\n\n.br-notify--content {\n    @apply ml-2 flex-col flex flex-grow space-y-1 self-center pr-2;\n    font-size: .96.5rem;\n    line-height: 19px;\n}\n\n.br-notify--content > span:nth-child(1) {\n    @apply font-medium;\n}\n\n.br-notify--content > span:nth-child(2) {\n    @apply text-dark-500 text-xs;\n    font-size: 15.5px;\n}\n\n.br-notify--close {\n    @apply text-gray-400 !w-6 !h-6 cursor-pointer transition transform hover:(text-gray-400/90 scale-90) active:(text-gray-500 rotate-45);\n}\n</style>","<template>\n<!-- TODO: implement hidden flag for each field -->\n<form class=\"br-form\" :class=\"`br-form__${formType}`\" novalidate target=\"_self\" enctype=\"application/json\" @submit.prevent=\"onSubmit\">\n   \n        <teleport to='body'>\n            <br-notification v-model:show=\"notif.open\" :auto-close=\"true\" :level=\"notif.level\">\n                <template #default>\n                    <span v-html=\"notif.msg\"> </span>\n                </template>\n                <template v-if=\"notif.desc\" #desc>\n                    {{ notif.desc }}\n                </template>\n                <!-- <template #inline-actions>\n                    <section class=\"flex space-x-6 mt-3\">\n                        <span @click=\"notif.open=false\" class=\"br-link\">Undo</span>\n                        <span @click=\"notif.open=false\" class=\"br-link br-primary\">Dismiss</span>\n                    </section>\n                </template> -->\n            </br-notification>\n        </teleport>\n\n        <section>\n        \n            <slot name=\"before-fields\" :errors=\"errors\"/>\n\n            <section class=\"br-form--main\" :class=\"wrapperClass\">\n                <template v-for=\"(sectionObj, sectionName) in fields\" :key=\"sectionName\">\n                    <br-transition name=\"horizontalBlur2\">\n                        <article v-if=\"!sectionObj.hidden\" :ref=\"el => {if(el) sectionRefs[sectionName] = el}\" class='br-form--section' :class=\"sectionObj.classes || []\">\n                            <slot v-if=\"sectionName\" :name=\"`before-section-${sectionName}`\" />\n                            <slot v-if=\"sectionName\" :name=\"`section-${sectionName}`\" v-bind=\"sectionObj\">\n                                <header v-if=\"sectionObj.label\" class=\"br-form--section-header\">\n                                    <h3 v-if=\"sectionObj.label\">{{ sectionObj.label }}</h3>\n                                    <div v-if=\"sectionObj.helpText\">{{ sectionObj.helpText }}</div>\n                                </header>\n                            </slot>\n                            <slot v-if=\"sectionName\" :name=\"`prepend-section-${sectionName}`\" />\n\n                            <br-transition name=\"dissolve\" class=\"br-form--fields-wrap\" tag=\"div\" type=\"group\">\n                                <template v-for=\"fieldObj in sectionObj.fields\" :key=\"fieldObj.name\">\n                                    <div :id=\"fieldObj.id\" :ref=\"el => {if(el) fieldRefs[fieldObj.name] = el}\"\n                                        class=\"field\"\n                                        tabindex=\"0\"\n                                        :class=\"[\n                                            rootErrors[fieldObj.name] ? 'br-errored' : '',\n                                            fieldObj.parentClasses || ''\n                                        ]\"\n                                        @click=\"onFieldSelect\"\n                                        @focus=\"onFieldSelect\">\n\n                                        <article v-if=\"fieldObj.displayExtLabel\" class=\"br-form--ext-label\">\n                                            <div v-if=\"fieldObj.isRequired\" class=\"br-form--ext-label--required\"></div>\n                                            <label>{{ fieldObj.label }}</label>\n                                            <br-input-loading :loading=\"fieldObj.loading\"/>\n                                        </article>\n\n                                        <div v-else-if=\"!fieldObj.isCompound && fieldObj.isRequired\" class=\"br-form--ext-label--required br-plain-field\" :class=\"focusedFields[fieldObj.name] ? 'br-plain-field__focused' : ''\">\n                                            <span></span>\n                                        </div>\n                                        \n                                        <section>\n                                            <div class=\"br-form--field\">\n                                                <component\n                                                    :is=\"useSelectComponent(fieldObj.type)\"\n                                                    v-model=\"values[fieldObj.name]\"\n                                                    v-bind=\"fieldObj\"\n                                                    :class=\"[ fieldObj.classes || '' ]\"\n                                                    @update:auxModel=\"handleAuxModelUpdate\"\n                                                    @fieldupdated=\"fieldObj.handleFieldDebounced\"\n                                                    @field-blur=\"({valid}) => fieldObj.handleFieldBlur(valid, fieldObj.name, values[fieldObj.name])\"\n                                                    @focus-toggle=\"focusedFields[fieldObj.name]=true\"\n                                                >\n                                                    <!-- This trick passes all of the underlying slots to the current context -->\n                                                    <template v-for=\"(_, slotName) in $slots\" #[slotName]=\"slotData\">\n                                                        <slot :name=\"slotName\" v-bind=\"slotData\" />\n                                                    </template>\n                                                </component>\n                                            </div>\n                                        </section>\n\n                                        <slot :name=\"`after-field-${fieldObj.name}`\" />\n\n                                    </div>\n                                </template>\n\n                                <slot name=\"after-fields\" />\n\n                            </br-transition>\n                        </article>\n                    </br-transition>\n                </template>\n            </section>\n            <div class=\"br-form--submit\">\n                <slot name=\"submit-button\" v-bind=\"{formMode, meta, isSubmitting, submitText, submittingText}\">\n                    <br-button v-if=\"formMode === 'perForm'\" class=\"br-btn--main br-form--submit-btn\" \n                        type=\"submit\" :disabled=\"meta.touched && !meta.valid\" :loading=\"isSubmitting\">\n                            <template v-if=\"!isSubmitting\">\n                                {{ submitText }}\n                            </template>\n                            <template v-else>\n                                {{ submittingText }}\n                            </template>\n                    </br-button>\n                </slot>\n            </div>\n    </section>\n</form>\n</template>\n\n<script setup>\n// TODO: If meta.initialValues contains currently iterated field and that field has just produced the 'updated' event,\n// we shall perform the API request right away through `this.submitForm`\nconst PERSIST_EXCLUDED_FIELDS = ['password']\n\nimport { toRefs, computed, provide, reactive, watch, ref, getCurrentInstance} from 'vue'\nimport { useForm, FormContextKey } from 'vee-validate'\nimport { useDebounceFn } from '@vueuse/shared'\nimport { getAndParseLS } from '../utils'\nimport { useSelectComponent, blurryFieldTypes } from './composables'\nimport {object} from 'yup'\n\nconst emit = defineEmits(['update:modelValue'])\nconst props = defineProps({\n    name: {\n        type: String,\n        required: true\n    },\n    debounceInterval: {\n        type: Number,\n        default: 700\n    },\n    modelValue: {\n        type: Object,\n        default: () => ({})\n    },\n    onFieldValid: {\n        type: Function,\n        default: async () => {}\n    },\n    onFormErrors: {\n        type: Function,\n        default: async () => {}\n    },\n    onFormValid: {\n        type: Function,\n        default: async () => {}\n    },\n    persistState: {\n        // only in perForm mode before submitting\n        type: Boolean,\n        default: false\n    },\n    rootLoading: {\n        type: Boolean,\n        default: false\n    },\n    submitText: {\n        type: String,\n        default: 'Submit'\n    },\n    submittingText: {\n        type: String,\n        default: 'Submitting...'\n    },\n    schema: {\n        type: Object,\n        default: () => ({})\n    },\n    wrapperClass: {\n        type: [Array, String],\n        default: ''\n    }\n})\n\nconst focusedFields = reactive({})\nconst { modelValue, schema, debounceInterval, name, persistState, rootLoading } = toRefs(props)\nconst multiSelectionTypes = ['checkbox', 'switch']\nconst auxModelMap = reactive({})\nconst fieldRefs = ref({})\nconst sectionRefs = ref({})\nconst fieldLoading = reactive({})\nconst fieldSuccessText = ref({})\nconst isSubmittedValid = ref(false)\nconst FORM_PERSIST_KEY = `br:formperm:${name.value}`\nconst notif = reactive({\n    msg: '',\n    desc: '',\n    open: false,\n    level: 'info'\n})\n\nfunction notify (msg, desc, level) {\n    notif.level = level\n    notif.msg = msg\n    notif.desc = desc\n    notif.open = true\n}\n\nfunction closeNotif () {\n    notif.open = false\n}\n\nconst formMode = computed(() => schema.value.form && schema.value.form.save || 'perForm')\nconst formType = computed(() => (schema.value.form || {}).type || \"stacked\")\nconst compoundFieldTypes = ['selectionBox', 'decision', 'mapping']\nconst fieldIsCompoundMap = computed(() => Object.fromEntries(schema.value.fields.map(i => ([i.name, compoundFieldTypes.includes(useSelectComponent(i.type, true))]))))\nconst persistExcludedFields = computed(() => schema.value.fields.filter(field => PERSIST_EXCLUDED_FIELDS.includes(field.type)).map(field => field.name))\n\nconst persistFormValues = val => {\n    if (formMode.value === 'perForm' && persistState.value) {\n        const persistableValues = Object.fromEntries(Object.entries(val).filter(([key, value]) => value !== undefined && !persistExcludedFields.value.includes(key)))\n        localStorage.setItem(FORM_PERSIST_KEY, JSON.stringify(persistableValues))\n    }\n}\n\nconst validationSchema = computed(() => {\n    let localSchema = Object.fromEntries(\n        schema.value.fields.map((item, idx) => {\n            if (item.type === 'select') {\n                // now it's time to infer if it's single or multiple choice select\n                schema.value.fields[idx]['mode'] = item.rules.type === 'array' ? 'multi' : 'single'\n            }\n            else if (item.type === 'radio') {\n                schema.value.fields[idx]['mode'] = 'single'\n            }\n            else if (multiSelectionTypes.includes(item.type)) {\n                schema.value.fields[idx]['mode'] = 'multi'\n            }\n            else if (item.type === 'mapping') {\n                const {data, rules: {fields}} = item\n                for (const kk in data) {\n                    const {label} = data[kk]\n                    fields[kk].spec.label = label\n                }\n            }\n            // each item *should* contain the 'label' key.\n            // Use it to fill out the label function on yup rules.\n            return [item.name, item.rules.label(item.label)]\n        })\n    )\n    return object().shape(localSchema)\n})\n\nconst calcModelValue = computed(() => {\n    var base = reactive(modelValue.value || {})\n    if (formMode.value === 'perForm' && persistState.value) {\n        // perf lookup on localStorage for the latest copy of the current form\n        let localCopy = getAndParseLS(FORM_PERSIST_KEY) || {}\n        Object.assign(localCopy, base)\n        base = localCopy\n    }\n    return base\n})\n\nconst fieldsExemptFromSameValGuard = computed (() => {\n    const exemptFieldTypes = ['mapping']\n    return schema.value.fields.filter(({type}) => exemptFieldTypes.includes(type)).map(({name}) => name)\n})\n\nconst { handleSubmit, isSubmitting, setFieldError, setErrors, errors, meta, submitForm, values } = useForm({\n    validationSchema: validationSchema.value,\n    initialValues: calcModelValue.value\n})\n\nconst rootErrors = computed(() => {\n    const ret = Object.entries(errors.value).reduce((acc, curr) => {\n        let [key, val] = curr\n        if (key.match('.')) {\n            key = key.split('.')[0]\n            if (!acc[key]) {\n                acc[key] = []\n            }\n            acc[key].push(val)\n        }\n        else {\n            acc[key] = val\n        }\n        return acc\n    }, {})\n    return ret\n})\n\nprovide(\"IS_FORM_SUBMITTING\", isSubmitting)\nprovide(\"FORM_MODE\", formMode)\nconst app = getCurrentInstance()\n\nconst formTypesWithoutLabel = ['stacked-int', 'stacked-2col-int', 'stacked-disjoint-int']\n\nconst rawSchema = computed(() => {\n    const describedSchema = Object.entries(validationSchema.value.resolve({}).describe().fields)\n    return Object.fromEntries(describedSchema.map(([key, obj]) => { \n        return [key, obj.type === 'object' ? [obj] : obj.tests]\n    }))\n})\n\nconst isLoading = ({name}) => rootLoading.value || isSubmitting.value || !!fieldLoading[name]\nconst fieldsRecord = {}\n\nconst debounceFieldUpdate = useDebounceFn(async ([val, name]) => {\n    let oldVal = fieldsRecord[name]\n    oldVal = (oldVal == undefined || oldVal == null) ? meta.value.initialValues[name] : oldVal\n    if (val instanceof Object) {\n        if (JSON.stringify(val) === JSON.stringify(oldVal)) {\n            return\n        }\n        fieldsRecord[name] = JSON.parse(JSON.stringify(val))\n    }\n    else {\n        if (oldVal == val) return\n        fieldsRecord[name] = val\n    }\n\n    fieldLoading[name] = true\n    const setSuccessText = msg => fieldSuccessText.value[name] = msg\n    const setError = msg => setErrors({[name]: msg})\n    await props.onFieldValid(name, {value: val, setSuccessText, setError})\n    fieldLoading[name] = false\n}, debounceInterval.value)\n\nconst onBlurFieldUpdate = async (name, val, auxFieldName=null) => {\n    if (!val && val !== 0 && val !== false) {\n        return\n    }\n    let oldVal = fieldsRecord[auxFieldName || name]\n    oldVal = (oldVal == undefined || oldVal == null) ? meta.value.initialValues[auxFieldName || name] : oldVal\n    if (val instanceof Object) {\n        if (JSON.stringify(val) === JSON.stringify(oldVal)) {\n            return\n        }\n        fieldsRecord[auxFieldName || name] = JSON.parse(JSON.stringify(val))\n    }\n    else {\n        if (oldVal == val) return\n        fieldsRecord[auxFieldName || name] = val\n    }\n\n    fieldLoading[name] = true\n    const setSuccessText = msg => {\n        fieldSuccessText.value[name] = msg\n    }\n    const setError = msg => setErrors({[name]: msg})\n    await props.onFieldValid(auxFieldName || name, {value: val, setSuccessText, setError})\n    fieldLoading[name] = false\n}\n\nconst handleAuxModelUpdate = async ([compoundName, auxModelValue]) => {\n    const [origFieldName, _] = compoundName.split(\":\")\n    const modelValueKey = auxModelMap[compoundName]\n    calcModelValue.value[modelValueKey] = auxModelValue\n    emit('update:modelValue', calcModelValue.value)\n    if (formMode.value === 'perField') {\n        await onBlurFieldUpdate(origFieldName, auxModelValue, modelValueKey)\n    }\n    else {\n        persistFormValues(calcModelValue.value)\n    }\n}\n\nconst rawFields = computed(() => {\n    if (!schema.value) return {}\n    const fields = []\n\n    for (let item of schema.value.fields) {\n        const {models, name: fieldName, hidden} = item\n\n        if (hidden) continue\n\n        // set field compound\n        const isFieldCompound = fieldIsCompoundMap.value[fieldName]\n        item.isCompound = isFieldCompound\n\n        if (formMode.value === 'perField') {\n            // set field update handlers (debounce or onblur)\n            \n            if (!blurryFieldTypes.includes(item.type)) {\n                item.handleFieldDebounced = debounceFieldUpdate\n            }\n            else {\n                item.handleFieldBlur = async (valid, ...args) => {\n                    focusedFields[fieldName] = false\n                    if (valid) await onBlurFieldUpdate(...args)\n                }\n            }\n\n            // set successText on a field\n            item.successText = fieldSuccessText.value[fieldName]\n            \n            // set loading flag\n            item.loading = isLoading({name: fieldName})\n        }\n        else {\n            item.handleFieldDebounced = item.handleFieldBlur = () => {\n                focusedFields[fieldName] = false\n            }\n        }\n\n        // set schema\n        item.schema = rawSchema.value[fieldName]\n\n        // set pure yup validation schema\n        item.validationSchema = validationSchema.value.fields[fieldName]\n\n        // set required flag\n        item.isRequired = Object.values(item.schema).some(({name}) => name === 'required')\n\n        // set displayLabel flag\n        if (formType.value.match('-int')) {\n            item.displayExtLabel = false\n            item.displayLabel = true\n        }\n        else {\n            const needsLabelForm = !formTypesWithoutLabel.includes(formType.value)\n            item.displayExtLabel = needsLabelForm && !isFieldCompound\n            item.displayLabel = needsLabelForm && isFieldCompound\n        }\n\n        // set ID\n        item.id = item.id != undefined ? item.id : `br-field--${item.name}`\n\n        // handle aux models (vide br-input)\n        if (models) {\n            Object.entries(models).map(([modelKey, {name}]) => {\n                // fix it!\n                delete schema.value.models\n                item[name] = calcModelValue.value[modelKey]\n                auxModelMap[`${fieldName}:${name}`] = modelKey\n            })\n        }\n        fields.push(item)\n    }\n\n    return {\n        ...schema.value,\n        fields\n    }\n})\n\nconst fields = computed(() => {\n    let localSchema = Object.assign({}, rawFields.value)\n    const sections = localSchema.sections\n    if (!sections) return {'': {fields: localSchema.fields}}\n    for (let section in localSchema.sections) {\n        sections[section].fields = new Set()\n    }\n    for (let item of localSchema.fields) {\n        const {section=\"default\"} = item\n        if (!sections[section]) sections[section] = {}\n        if (!sections[section].fields) sections[section].fields = new Set()\n        sections[section].fields.add(item)\n    }\n    return sections\n})\n\nconst onFieldSelect = () => {\n    // basically clear out all success messages\n    fieldSuccessText.value = {}\n}\n\nconst onInvalidSubmit = async ({ values, errors, results }) => {\n    await props.onFormErrors({values, errors, results, notify})\n}\n\nconst handleFormUpdate = handleSubmit(async values => {\n    // clear the persistence cache for this form\n    localStorage.setItem(FORM_PERSIST_KEY, JSON.stringify({}))\n    await props.onFormValid(values, {setErrors, notify})\n    isSubmittedValid.value = true\n\n    const form = app.provides[FormContextKey]\n}, onInvalidSubmit)\n\n\nconst onSubmit = (...args) => {\n    if (formMode.value === 'perField') return\n    return handleFormUpdate(...args)\n}\n\nwatch(values, (val) => {\n    emit('update:modelValue', val)\n    if (!isSubmittedValid.value) {\n        persistFormValues(val)\n    }\n})\n\n</script>\n\n<style lang=\"css\">\n.br-form {\n}\n\n.br-form--fields-wrap, .br-form--section-header {\n    @apply px-4 sm:px-0;\n}\n\n.br-form[class*=\"br-form__stacked-2col\"], .br-form[class*=\"br-form__stacked-disjoint\"] {\n    @apply !md:block;\n}\n\n.br-form[class*=\"br-form__stacked-disjoint\"] .br-form--section:nth-child(1) {\n    @apply pt-8;\n}\n\n.br-form[class*=\"br-form__stacked-2col\"] .br-form--section,\n.br-form[class*=\"br-form__stacked-disjoint\"] .br-form--section {\n    @apply md:(grid grid-cols-3 gap-6);\n}\n.br-form[class*=\"br-form__stacked-disjoint\"] .br-form--section:not(:nth-child(1)) {\n    @apply pt-8;\n}\n\n.br-form[class*=\"br-form__stacked-2col\"] .br-form--section > header,\n.br-form[class*=\"br-form__stacked-disjoint\"] .br-form--section > header {\n    @apply col-span-1;\n}\n\n.br-form[class*=\"br-form__stacked-2col\"] .br-form--fields-wrap,\n.br-form[class*=\"br-form__stacked-disjoint\"] .br-form--fields-wrap {\n    @apply col-span-2;\n}\n\n.br-form[class*=\"br-form__stacked-disjoint\"] .br-form--fields-wrap {\n    @apply bg-white shadow border-none py-6 pb-9 sm:(px-6 rounded-md) lg:px-8;\n}\n\n.br-form[class*=\"br-form__stacked-disjoint\"] .br-form--section-header {\n    @apply !pt-0 mb-6;\n}\n\n.br-form[class*=\"br-form__stacked\"] {\n    @apply mx-auto !pt-0 py-6 sm:(px-6 rounded-md) md:(grid grid-cols-12) lg:px-8 bg-white border-none;\n}\n\n.br-form[class*=\"br-form__stacked-2col\"] .br-form--fields-wrap, .br-form[class*=\"br-form__stacked-2col\"] .br-form--section-header  {\n    @apply !pt-8;\n}\n\n.br-form__split {\n    @apply mx-auto sm:(px-6 rounded-md) lg:px-8 bg-white shadow border-none;\n}\n\n.br-form[class*=\"br-form__stacked-cleaved\"] {\n    @apply !shadow-none;\n}\n\n.br-form[class*=\"br-form__stacked\"] > section {\n    @apply col-span-8 col-start-3;\n}\n.br-form[class*=\"br-form__stacked-cleaved\"] > section {\n    @apply col-span-10 col-start-2;\n}\n.br-form[class*=\"br-form__stacked-cleaved\"] > section > section {\n    @apply space-y-8;\n}\n.br-form[class*=\"br-form__stacked-cleaved\"] > section > section > article {\n    @apply mx-auto py-6 pb-9 pt-0 sm:(px-6 rounded-md) lg:px-8 bg-white shadow border-none;\n}\n\n.br-form[class*=\"br-form__stacked-cleaved\"] .br-form--section-header, .br-form[class*=\"br-form__stacked-cleaved\"] .br-form--fields-wrap {\n    @apply !pt-8;\n}\n\n.br-form[class*=\"br-form__stacked\"]:not(.br-form[class*=\"br-form__stacked-cleaved\"]) > section > section,\n.br-form__split > section > section {\n    @apply divide-y divide-dark-300 space-y-8;\n}\n\n/* .br-form[class*=\"br-form__stacked\"] .br-form--fields-wrap, */\n.br-form[class*=\"br-form__stacked\"] .br-form--section-header {\n    @apply py-12;\n}\n.br-form__split .br-form--fields-wrap, .br-form__split .br-form--section-header {\n    @apply pt-6;\n}\n.br-form__split .br-form--section-header {\n    @apply py-6 pt-9;\n}\n.br-form__split .br-form--fields-wrap {\n    @apply md:(divide-y divide-$br-border-color);\n}\n.br-form__split .br-form--fields-wrap > div {\n    @apply pb-6 items-center;\n}\n.br-form__split .br-form--fields-wrap > div:not(:nth-child(1)){\n    @apply pt-6;\n}\n\n.br-form--section-header > h3 {\n    @apply text-left mb-2;\n}\n\n.br-form--section {\n    @apply w-full;\n}\n\n.br-form--section-header > div {\n    @apply text-dark-500 text-left text-sm;\n}\n\n.br-form--fields-wrap > div {\n    @apply relative;\n}\n\n.br-form--ext-label--required {\n    @apply self-start w-6px h-6px flex-none absolute bg-danger-400 rounded-full transform -translate-x-2 -translate-y-1 transition-transform transition ease-in duration-400;\n    transition-timing-function: cubic-bezier(0.37, -1.5, 0.35, 2.68);\n}\n\n.br-form--ext-label--required.br-plain-field {\n    @apply -translate-x-0.75 -translate-y-0.75 ;\n}\n\n.br-form--ext-label--required.br-plain-field__focused {\n    @apply -translate-x-1.75 -translate-y-1.75 ;\n}\n.br-form--ext-label {\n    @apply flex mb-1 text-sm font-medium text-$br-input-ext-label-color;\n}\n.br-form--ext-label > label {\n    @apply mr-2;\n}\n\n.br-form[class*=\"br-form__stacked\"] .br-form--section > .br-form--fields-wrap {\n    @apply grid grid-cols-6 gap-y-8 gap-x-8;\n}\n\n.br-form__split .br-form--section > .br-form--fields-wrap > div{\n    @apply md:(grid grid-cols-3 gap-x-8 col-span-2);\n}\n.br-form__split .br-form--section > .br-form--fields-wrap > div > article{\n    @apply col-span-1;\n}\n.br-form__split .br-form--section > .br-form--fields-wrap > div > section{\n    @apply col-span-2 grid grid-cols-6;\n    \n}\n\n.br-form__split .br-form--section > .br-form--fields-wrap > div > section > div{\n    @apply lg:(col-start-1 col-end-$col-end-local) col-start-1 col-end-7;\n    --col-end-local: var(--col-end, span 3);\n}\n\n.br-form[class*=\"br-form__stacked\"] .br-form--section > .br-form--fields-wrap > div {\n    @apply col-span-6 sm:(col-start-$col-start col-end-$col-end);\n    --col-start: 1;\n    --col-end: span full;\n}\n\n.br-span-flex {\n    --col-start: auto !important;\n}\n\n.br-span-auto {\n    --col-end: auto !important;\n}\n\n.br-span-1 {\n    --col-end: span 1 !important;\n}\n\n.br-span-2 {\n    --col-end: span 2 !important;\n}\n\n.br-span-3 {\n    --col-end: span 3 !important;\n}\n\n.br-span-4 {\n    --col-end: span 4 !important;\n}\n\n.br-span-5 {\n    --col-end: span 5 !important;\n}\n\n.br-span-full {\n    --col-end: -1 !important;\n}\n\n.br-form--submit {\n    @apply px-4 my-6 md:px-0 relative w-full;\n}\n\n.br-form--submit-btn {\n    @apply w-full lg:w-auto mx-auto py-2.5 text-base font-light lg:px-24 mx-0;\n}\n</style>\n\n"],"names":["gsap","object"],"mappings":"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"}